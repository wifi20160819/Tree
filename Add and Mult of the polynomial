#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
typedef struct PolyNode*Polynomial;
struct PolyNode{
	int coef;
	int expon;
    Polynomial link;
}; 
	Polynomial ReadPoly();
	Polynomial ReadPoly();
	Polynomial MultPoly(Polynomial p1,Polynomial p2);
	void PrintPoly(Polynomial PP);
    Polynomial AddPoly(Polynomial P1,Polynomial P2);
    void Attach(int c;int e,Polynomial *pRear);
int main(){
    Polynomial P1,P2,PP,PS;
	P1=ReadPoly();
	P2=ReadPoly();
	PP=MultPoly(P1,P2);
	PrintPoly(PP);
    PS=AddPoly(P1,P2);
	PrintPoly(PS);
	return 0;
}
Polynomial ReadPoly(){
	int n;
	int e,c;
	Polynomial p,Rear,t;
	scanf("%d\n",&n);
	p=(Polynomial)malloc(sizeof(struct PolyNode));
	p->link=NULL;
    Rear=p;
	while(n--){
		scanf("%d %d",&c,&e);
		Attach(c,e,&Rear);
	}
	t=p;p=p->link;free(t);
	return p;
}
void Attach(int c;int e,Polynomial *pRear){
   Polynomial p;
   p=(Polynomial)malloc(sizeof(struct PolyNode));
   p->coef=c;
   p->expon=e;
   p->link=NULL;
   (*pRear)->link=p;
   (*pRear)=p;
}
Polynomial AddPoly(Polynomial P1,Polynomial P2){
	Polynomial t1,t2,Rear,p;
	t1=p1;t2=p2;
    p=(Polynomial)malloc(sizeof(struct PolyNode));
    p->link=NULL;
    Rear=p;
	while(t1&&t2){
		if(t1->expon==t2->expon)
		{
			p->coef=t1->coef+t2+coef;
			p->expon=t1->expon;
		}
		else if(t1->expon>t2->expon){
			p->coef=t1->coef;
			p->expon=t1->expon;

		}
		else{
			p->coef=t2+coef;
			p->expon=t2->expon;
		}
	}
	while(t1){
			p->coef=t1->coef;
			p->expon=t1->expon;

	}
	while(t2){
			p->coef=t2+coef;
			p->expon=t2->expon;

	}
	Attach(	p->coef,p->expon,&p);
    Rear=p;p=p->link;free(Rear);
	return p;
}
Polynomial MultPoly(Polynomial p1,Polynomial p2){
  Polynomial t1,t2,P,Rear,t;
  int e,c;
t1=p1;t2=p2;
P=(Polynomial)malloc(sizeof(Polynomial));
Rear=P;
  if(!t1&&!t2) return NULL;
 if(t1){
	  while(t2){
		  P->expon=t1->expon+t2->expon;
		  P->coef=t1->coef*t2->coef;
       	  Attach(P->coef,P->expon,&Rear);
		  t2=t2->link;
	  }
 }
t1=t1->link;
while(t1){
	t2=p2;Rear=P;
	while(t2){
		e=t1->expon+t2->expon;
		c=t1->coef*t2->coef;
       while(Rear->link&&Rear->link>e){
		   Rear=Rear->link;
	   }
	   if(Rear->link==e){
		   if(Rear->link->coef+c)
           Rear->link->coef+=c;
		   else{
			   t=Rear->link;
			   Rear->link=t->link;
		   }
		   else{
			   t=(Polynomial)malloc(sizeof(Polynomial));
			   t->expon=e;
			   t->coef=c;
			   t->link=Rear->link;
			   Rear->link=t;
			   Rear=Rear->link;
		   }
	   }//if
	   t2=t2->link;
	}//whilet2
	t1=t1->link;
}//whilet1
t2=P;P=P->link;free(t2);
return P;

}//mult
void PrintPoly(Polynomial PP){
   int  flag=0;
   if(!PP) {
	   printf("0  0\n");
	   return ;
   }
   while(PP){
	   if(!flag)
		   flag=1;
	   else printf(" ");
	   printf("%d %d",PP->expon,PP->coef);
	   PP=PP->link;
   }
   printf("\n");
}
