#include<stdio.h>
#include<stdlib.h>
#define Tree int
#define Null -1
#define Maxsize 10
#define Element char
struct tree{
	Tree Left;
	Tree Right;
	Element x;
} T1[Maxsize];T2[Maxsize];

Tree BuildTree(struct tree T[]);
int Isomorhic( tree t1, tree t2);
int main(){
	struct tree R1,R2;
	R1=BuildTree(T1);
	R2=BuildTree(T2);
	if(Isomorhic(R1,R2))printf("YES!\n");
	else printf("NO!\n");
	return 0;
}
Tree BuildTree(struct tree T[]){
	int N;
	int Root=0;
	int *check=(int*)malloc(sizeof(int));
	scanf("%d",&N);
	if(N){
		for(i=0;i<N;i++)
		check[i]=0;
		for(i=0;i<N;i++){
			scanf("%c %c %c",&T->Left,&T->Right,%T->x);
			if(T->Left!='-')
			{
				T->Left=T->Left-'0';
				check[i]=1;
			}
			if(T->Right!='-')
			{
				T->Right=T->Right-'0';
				check[i]=1;
			}
		}
		
	}
      for(i=0;i<N;i++)
		if(!check[i]) break;
		Root=i;
		return Root;
}
int Isomorhic( tree t1, tree t2){
	if(t1==NULL)&&(t2==NULL)
		return 1;
	if((t1==NULL)&&(t2!=NULL))||((t2==NULL)&&(t1!=NULL))
		return 0;
	if(T1[t1]->x!=T2[t2]->x)
		return 0;
	if(T1[t1]->Left==NULL&&T2[t2]->Left==NULL){
		return(Isomorhic(T1[t1]->Right,T2[t2]->Right));
	}
	if(T1[t1]->Right==NULL&&T2[t2]->Right==NULL){
		return(Isomorhic(T1[t1]->Left,T2[t2]->Left));
	}

	if(T1[t1]!=NULL&&T2[t2]!=NULL&&T1[t1]->Left]==T2[t2]->Left])
		return(Isomorhic(T1[t1]->Left,T2[t2]->Left)&&Isomorhic(T1[t1]->Right,T2[t2]->Right));
	else
		return(Isomorhic(T1[t1]->Left,T2[t2]->Right)&&Isomorhic(T1[t1]->Right,T2[t2]->Left));


}
